""""""""""""""""""""""""""""""""""""""""""""""""""
" Funcions
"""""""""""""""""""""""""""""""""""""""""""""""""""
function! EnsureDirExists (dir)
" Funció per crear directoris si no existeixen
    if !isdirectory(a:dir)
        if exists('*mkdir')
            call mkdir(a:dir,'p')
        endif
    endif
endfunc

function! DeleteTrailingWS()
" Funció per esborrar els espais a final de línia del buffer
    let previous_search=@/
    let previous_cursor_line=line('.')
    let previous_cursor_column=col('.')
    %s/\s\+$//ge
    let @/=previous_search
    call cursor(previous_cursor_line, previous_cursor_column)
endfunc

function! RetabIndents()
" Funció que canvia espais per tabs al principi de línia del buffer
    let previous_search=@/
    let previous_cursor_line=line('.')
    let previous_cursor_column=col('.')
    if &expandtab
        execute '%s@^\(\t\)\+@\=repeat(repeat(" ", '.&ts.'), len(submatch(0)))@e'
    else
        execute '%s@^\(\ \{'.&ts.'\}\)\+@\=repeat("\t", len(submatch(0))/'.&ts.')@e'
    endif
    let @/=previous_search
    call cursor(previous_cursor_line, previous_cursor_column)
endfunc

" Use Q to intelligently close a window 
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " We should never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
        wincmd c
        return
    endif

    if number_of_windows_to_this_buffer > 1
        wincmd c
    else
        bdelete
    endif
endfunction

function! CallFlake8()
    let previous_search=@/
    let previous_cursor_line=line('.')
    let previous_cursor_column=col('.')
    execute 'call Flake8()<Cr>'
    let @/=previous_search
    call cursor(previous_cursor_line, previous_cursor_column)
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""
" Creació de directoris
""""""""""""""""""""""""""""""""""""""""""""""""""
:silent call EnsureDirExists($HOME.'/.vim_backup')           " Crear directori de backup
:silent call EnsureDirExists($HOME.'/.vim_swap')             " Crear directori de swap
:silent call EnsureDirExists($HOME.'/.vim_undo')             " Crear directori de undo
:silent call EnsureDirExists($HOME.'/.vim_view')             " Crear directori de view
:silent call EnsureDirExists($HOME.'/.vim_sessions')         " Crear directori de sessions


""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen
execute pathogen#infect()
Helptags

" Mantenir la posició del cursor quan obres un buffer al mateix lloc a on el tenies al tancar-lo
autocmd BufWinLeave *.* silent! mkview
autocmd BufWinEnter *.* silent! loadview

" When restoring a hidden buffer Vim doesn't always keep the same view (like
" when your view shows beyond the end of the file). (Vim tip 1375)
if ! &diff
    au BufLeave * let b:winview = winsaveview()
    au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif

" Posar al títol de la finestra el path del buffer que estem editant
let &titlestring = expand('%:pwd')
if &term == 'screen' || &term == 'xterm'
    set title
endif

" keyboard shortcuts
let mapleader = ','

set autoindent                                               " Activar autoindendació
set autoread                                                 " Reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupdir=~/.vim_backup                                  " Canviar directori de buffer de backup
set clipboard=unnamed                                        " Yank and paste with the system clipboard
set cursorline                                               " Ressalta la línia a on està el cursor
set directory=~/.vim_swap                                    " Canviar directori de fitxers de swap
set encoding=utf-8                                           " Posar utf-8 com a encoding per defecte
set expandtab tabstop=4 softtabstop=4 shiftwidth=4           " Definir els tabs com 4 espais
set foldlevel=99
set foldmethod=indent                                        " Es creen folds directament amb la indentació
set foldnestmax=1                                            " Perquè es crein folds només al primer nivell d'indentació
set hidden                                                   " Permet moure entre buffers sense mostrar error si estan editats però no guardats
set history=10000                                            " Guarda les 10000 últimes comandes
set hlsearch                                                 " Es ressalten les coincidencies de la cerca
set ignorecase                                               " Case-sensitive search if any caps
set incsearch                                                " Search as you type
set infercase                                                " Per fer case sensitive l'autocomplete
set iskeyword+=_,$,@,%,#                                     " Not word dividers
set laststatus=2                                             " Always show statusline
set lazyredraw                                               " No repinta la pantalla mentre s'executen macros, més ràpid
set list                                                     " Ressaltar els caràcters especials
set listchars=tab:▸\ ,trail:▫,eol:↵,extends:»,precedes:«     " Llistat de caràcters especials que es ressalten
set mouse=                                                   " Deshabilitar el ratolí
set nocompatible                                             " Treure la compatibilitat amb Vi
set noerrorbells                                             " Perquè no surtin errors sonors
set novisualbell                                             " Perquè no surtin errors visuals
set nowrap sidescroll=1 sidescrolloff=1                      " No tallar frases
set nrformats=                                               " Per utilitzar el sistema decimal, no octal a l'incrementar o decrementar números
set number                                                   " Show line numbers
set ruler                                                    " Show where you are
set scrolloff=3                                              " Deixa sempre visibles 3 línies a sobre o sota el cursor
set showcmd                                                  " Mostra els parcials de les comandes
set showtabline=2                                            " Mostra la barra de tabs sempre
set smartcase                                                " Case-sensitive search if any caps
set splitright splitbelow                                    " Obre les noves finestres a la dreta i a sota
set switchbuf=usetab                                         " A l'obrir un nou fitxer posiciona a la tab/finestra que el tingui, no l'obre de nou
set tags+=~/.virtualenv.tags                                 " Afegir tags del virtualenv als tags per defecte
set undodir=~/.vim_undo                                      " Canviar directori de fitxers de undo
set undofile                                                 " Undo persistent, encara que es tanqui el buffer
set undolevels=10000                                         " Augmenta a 10000 el nivel de undo
set undoreload=10000                                         " Augmenta a 10000 el nivel de redo
set viewdir=~/.vim_view                                      " Canviar directori de fitxers de view
set wildignore+=*.swp,*.bak,*.pyc,*.pyo,*.class,*.tmp,*~     " Ignorar aquests tipus de fitxers
set wildmenu                                                 " Show a navigable menu for tab completion on command line
set wildmode=full                                            " Mostra les possibilitats d'una comanda rotllo zsh

" Activar colors al text
syntax enable

set t_Co=256                                                 " Número de colors
" Posar l'esquema de colors jellybeans
set background=dark
colorscheme solarized
highlight SpecialKey ctermbg=NONE guibg=NONE


""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapeig de teclat en mode inserció
""""""""""""""""""""""""""""""""""""""""""""""""""

" Anar al mode normal des del mode insert amb jj
inoremap jj <Esc>


""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapeig de teclat en mode visual
""""""""""""""""""""""""""""""""""""""""""""""""""

" Crear un fold amb la tecla <Space>
vmap <Space> zf


""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapeig de teclat en mode comanda
""""""""""""""""""""""""""""""""""""""""""""""""""

" Escriu a la línia de comandes el directori actual posant %%
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<Cr>

" Permet moure's per la història de comandes amb <C-n> i <C-p>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>


""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapeig de teclat en mode normal
""""""""""""""""""""""""""""""""""""""""""""""""""

" Moure a la finestra dreta amb Ctrl-H
nmap <C-h> <C-w>h
" Moure a la finestra inferior amb Ctrl-J
nmap <C-j> <C-w>j
" Moure a la finestra superior amb Ctrl-K
nmap <C-k> <C-w>k
" Moure a la finestra esquerra amb Ctrl-L
nmap <C-l> <C-w>l

" Per fer redo es pot amb <C-r> i amb U
nnoremap U <C-r>

" Executar vimgrep al directori actual
nmap <Leader>vg :vimgrep //gj **/*<Left><Left><Left><Left><Left><Left><Left><Left>

" Mostrar una finestra amb els resultats de la cerca prèvia al buffer actual
nnoremap <silent> <Leader>/ :execute 'vimgrep /'.@/.'/g %'<Cr>:copen<Cr>

" Obrir i tancar folders amb la tecla <Space>
nmap <Space> za

" Copiar del caràcter actual al final de línia amb la tecla Y, per similitud amb D i C
nmap <S-y> y$

" Separar línies amb K
nnoremap K i<Cr><Esc>^

" Deshabilitar les tecles de moviment
nnoremap <Right> <Nop>
nnoremap <Left>  <Nop>
nnoremap <Down>  <Nop>
nnoremap <Up>    <Nop>

" Utilitzar fletxa dreta i esquerra per anar al buffer següent i anterior, respectivament:
nnoremap <left> :bprev<cr>
nnoremap <right> :bnext<cr>

" Posar la configuració de tabs a 2 espais amb <Leader><Leader>2
nnoremap <Leader><Leader>2 <Esc>:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2<Cr>
" Posar la configuració de tabs a 4 espais amb <Leader><Leader>4
nnoremap <Leader><Leader>4 <Esc>:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4<Cr>
" Posar la configuració de tabs a 8 espais amb <Leader><Leader>8
nnoremap <Leader><Leader>8 <Esc>:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8<Cr>
" Posar la configuració de 4 espais amb <leader><leader>0
nnoremap <Leader><Leader>0 <Esc>:set expandtab tabstop=4 softtabstop=4 shiftwidth=4<Cr>

" Substituir la paraula sota el cursor a tot el buffer
nnoremap <Leader>* :%s/\<<C-r><C-w>\>//g<Left><Left>

" Obrir .vimrc a un nou tab amb <Leader>vv
nnoremap <Leader>vv :tabedit $MYVIMRC<Cr>

" Alterna entre maximitzar finestra actual i mantenir la disposició amb <Leader>m
nnoremap <silent> <Leader>m :MaximizerToggle<Cr>

" Obre tots els buffers oberts en tabs amb <Leader>tb
nnoremap <silent> <Leader>tb :tab :ball<Cr>
" Tancar la pestanya actual amb <Leader>tc
nnoremap <silent> <Leader>tc :tabclose<Cr>
" Obrir el buffer actual a una nova pestanya amb <Leader>te
nnoremap <silent> <Leader>te :tabedit %<Cr>
" Tancar totes les pestanyes menys l'actual amb <Leader>to
nnoremap <silent> <Leader>to :tabonly<Cr>

" Tancar tots els buffers que no estan oberts a cap finestra ni pestanya
nnoremap <silent> dhb :Wipeout<Cr>

" Utilitzar Q per tancar buffers
nnoremap <silent> Q :call CloseWindowOrKillBuffer()<Cr>

" Per seleccionar l'últim text enganxat
nnoremap <expr> gv '`[' . strpart(getregtype(), 0, 1) . '`]'

" Intercanviar v per <C-v>: v per defecte serà en bloc
nnoremap v <C-V>
nnoremap <C-V> v

" Esborra els espais al final de totes les línies amb <Leader>dt
noremap <silent> <Leader>dt :call DeleteTrailingWS()<Cr>
" Canvia els espais per tabuladors al principi de totes les línies amb <Leader>ri
noremap <silent> <Leader>ri :call RetabIndents()<Cr>

" Repeteix la última cerca amb els mateixos flags amb & en mode normal, visual o de selecció
nnoremap & :&&<CR>
xnoremap & :&&<CR>

filetype plugin indent on


""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuració de plugins
""""""""""""""""""""""""""""""""""""""""""""""""""

" CtrlP: Navegació ràpida de fitxers i buffers.
" git clone https://github.com/kien/ctrlp.vim

let g:ctrlp_match_window = 'order:ttb,max:20'                " Ordenació i número màxim de resultats
let g:ctrlp_regexp = 1                                       " Fa servir cerca amb regex, no fuzzy

if executable('ag')
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
    let g:ackprg = 'ag --nogroup --column'

    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c:%m

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Mostrar finestra amb el CtrlP de buffers oberts
nmap <Leader>b :CtrlPBuffer<Cr>
" Mostrar finestra amb el CtrlP de fitxers
nmap <Leader>f :CtrlP<Cr>
" Mostrar finestra amb el CtrlP de fitxers escanejant de nou
nmap <Leader>F :CtrlPClearCache<Cr>:CtrlP<Cr>
" Mostrar finestra amb els tags extrets fent ctags
nmap <Leader>. :CtrlPClearCache<Cr>:CtrlPTag<Cr>

" Vim-easymotion: Per saltar entre paraules, cerques, etc. de manera més àgil.
" git clone https://github.com/Lokaltog/vim-easymotion

" Vim-fugitive: Utilitzar Git des de Vim
" git clone https://github.com/tpope/vim-fugitive

" Vim-git-log: Amplia fugitive. Per veure el log dels canvis al repositori.
" git clone https://github.com/kablamo/vim-git-log

" Vim-signify: Marca els canvis del fitxer respecte el repositori a la columna esquerra del fitxer.
" git clone https://github.com/mhinz/vim-signify

" Gitv: Mostra l'estat del repositori Git (necessita fugitive)
" git clone https://github.com/gregsexton/gitv
" Comanda :Gitv

" Vim-maximizer: Per maximitzar i minimitzar finestres i mantenir les proporcions.
" git clone https://github.com/szw/vim-maximizer

" Gundo: Mostra l'arbre de modificacions d'un fitxer
" git clone https://github.com/sjl/gundo.vim
nnoremap <Leader>u :GundoToggle<Cr>

" ag: Fer cerques de text a dins de fitxers (grep) millor.
" Necessita silver-searcher: brew install the_silver_searcher
" git clone https://github.com/rking/ag.vim

" Tagbar: Per mostrar les funcions i demés d'una classe a la dreta
" Necessita CTags: brew install ctags-exuberant
" git clone https://github.com/majutsushi/tagbar
nmap <Leader>o :TagbarToggle<Cr><C-l>

" vim-session: Gestionar les sessions de vim
" Necessita vim-misc: git clone https://github.com/xolox/vim-misc
" git clone https://github.com/xolox/vim-session
let g:session_directory = '~/.vim_sessions'
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
nnoremap <Leader>so :OpenSession 
nnoremap <Leader>ss :SaveSession 
nnoremap <Leader>sd :DeleteSession<Cr>
nnoremap <Leader>sc :CloseSession<Cr>

" vim-surround: mitjançant l'acció 's' es posen i treuen parentesis, claudators, cometes simples, un tag...
" git clone https://github.com/tpope/vim-surround

" vim-exchange: Permet intercanviar textos (paraules, frases, etc.)
" git clone https://github.com/tommcdo/vim-exchange
" cx{àmbit}: la primera vegada marca l'àmbit com a element per intercanviar. La segona, intercanvia el nou àmbit amb l'anterior.

" vim-flake8:
" git clone https://github.com/nvie/vim-flake8
autocmd FileType python map <buffer> <Leader>pv :call CallFlake8()<Cr>
let g:flake8_ignore = "E501"
let g:flake8_max_complexity=10

" vim-unimpaired:
" git clone https://github.com/tpope/vim-unimpaired


"""""""""""""""""""""" Esborrats

" (Esborrat) vim-css-color: Mostra el background del codi hex del color indicat.
" git clone https://github.com/ap/vim-css-color

" (Esborrat) Vim startify: Mostra a l'iniciar vim sense fitxer els últims fitxers/sessions oberts per obrir-los.
" git clone https://github.com/mhinz/vim-startify

" (Esborrat) Vim-indent-object: Permet fer seleccions i modificació de text basades amb la indentació
" git clone https://github.com/michaeljsmith/vim-indent-object

" (Esborrat) vim-indexed-search: Mostra a quin element estem de tots els trobats per una cerca
" git clone https://github.com/henrik/vim-indexed-search

" (Esborrat) tabular: Aliniar fàcilment textos segons el paràmetre que indiquem
" git clone https://github.com/godlygeek/tabular

" (Esborrat) vim-seek: fer cerques a la mateixa línia utilitzant dos caràcters en lloc d'un com f i F
" git clone https://github.com/goldfeld/vim-seek

" (Esborrat) ultisnips: Snippets de TextMate i SnipMate
" git clone https://github.com/SirVer/ultisnips

